using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TestingSphere : MonoBehaviour
{
    
    [SerializeField] private DeathtrapUDPCommunicationEventsHandler deathtrapUDPCommunicationEventsHandler;
    [SerializeField] private Transform initialPosition;
    [SerializeField] private Transform finalPosition;
    [SerializeField] private Color idleColor;
    [SerializeField] private Color badSmellColor;
    
    private Vector3 targetPosition;
    
    private Renderer sphereRenderer;
    private Material sphereMaterial;
    private float sphereColorGradient;
    
    
    private void Start()
    {
        transform.position = initialPosition.position;
        targetPosition = initialPosition.position;
        
        sphereRenderer = GetComponent<Renderer>();
        sphereMaterial = sphereRenderer.material;
        sphereMaterial.color = idleColor;
        
        
        deathtrapUDPCommunicationEventsHandler.OnPetalsOpeningChanged += HandlePetalsOpeningChanged;
        deathtrapUDPCommunicationEventsHandler.OnBadSmellEmittingChanged += HandleBadSmellEmittingChanged;

    }
    
    
    
    private void Update()
    {
        // Move the sphere towards the final position
        transform.position = Vector3.MoveTowards(transform.position, targetPosition, 0.1f);
    }
    
    
    // Names of methods generated by Copilot. This is just the testing with the sphere!
    
    private void HandlePetalsOpeningChanged(int isOpening)
    {
        // Implement logic for petals opening/closing
        Debug.Log("Petals opening changed: " + isOpening);
        
        // If the boolean is true, move the sphere towards the final position
        targetPosition = isOpening > 0 ? finalPosition.position : initialPosition.position;
        
    }

    private void HandleBadSmellEmittingChanged(int isEmitting)
    {
        // Implement logic for bad smell emission
        StopAllCoroutines();
        StartCoroutine(ChangeColorGradually(isEmitting > 0 ? badSmellColor : idleColor));
        Debug.Log("Bad smell emitting changed: " + isEmitting);
    }
    
    
    private IEnumerator ChangeColorGradually(Color targetColor)
    {
        Color currentColor = sphereMaterial.color;
        float duration = 3.0f; // Duration of the color change
        float elapsed = 0.0f;

        while (elapsed < duration)
        {
            sphereMaterial.color = Color.Lerp(currentColor, targetColor, elapsed / duration);
            elapsed += Time.deltaTime;
            yield return null;
        }

        sphereMaterial.color = targetColor;
    }
    
    
}
